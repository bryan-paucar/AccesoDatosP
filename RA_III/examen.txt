class Message(Model):
 context = TextField()
 timestamp = DateTimeField(default=datetime.datetime.now)


ForeignKeyField
ForeignKeyField is a special eld type that allows one model to reference another. Typically a
foreign key will contain the primary key of the model it relates to (but you can specify a
parcular column by specifying a field ).
Foreign keys allow data to be normalized. In our example models, there is a foreign key from
Tweet to User . This means that all the users are stored in their own table, as are the tweets,
and the foreign key from tweet to user allows each tweet to point to a parcular user object.
ÔÅ™ Note
Refer to the Relaonships and Joins document for an in-depth discussion of foreign keys,
joins and relaonships between models.
In peewee, accessing the value of a ForeignKeyField will return the enre related object, e.g.:
 tweets = (Tweet
 .select(Tweet, User)
 .join(User)
 .order_by(Tweet.created_date.desc()))
for tweet in tweets:
 print(tweet.user.username, tweet.message)


# create a peewee database instance -- our models will use this database to
# persist information
database = SqliteDatabase(DATABASE)
# model definitions -- the standard "pattern" is to define a base model class
# that specifies which database to use. then, any subclasses will automatically
# use the correct storage.
class BaseModel(Model):
 class Meta:
 database = database
# the user model specifies its fields (or columns) declaratively, like django
class User(BaseModel):
 username = CharField(unique=True)
 password = CharField()
 email = CharField()
 join_date = DateTimeField()
# this model contains two foreign keys to user -- it essentially allows us to
# model a "many-to-many" relationship between users. by querying and joining
# on different columns we can expose who a user is "related to" and who is
# "related to" a given user
class Relationship(BaseModel):
 from_user = ForeignKeyField(User, backref='relationships')
 to_user = ForeignKeyField(User, backref='related_to')
 class Meta:
 # `indexes` is a tuple of 2-tuples, where the 2-tuples are
 # a tuple of column names to index and a boolean indicating
 # whether the index is unique or not.
 indexes = (
 # Specify a unique multi-column index on from/to-user.
 (('from_user', 'to_user'), True),
 )
# a dead simple one-to-many relationship: one user has 0..n messages, exposed by
# the foreign key. a users messages will be accessible as a special attribute,
# User.messages.
class Message(BaseModel):
 user = ForeignKeyField(User, backref='messages')
 content = TextField()
 pub_date = DateTimeField()



